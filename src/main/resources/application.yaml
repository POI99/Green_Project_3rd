spring:

  config:
    import: optional:file:.env

  jackson:
    deserialization:
      fail-on-unknown-properties: false

  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.DB_USERNAME}
    password: ${DEFAULT.DB_PASSWORD}

  servlet:
    multipart:
      max-file-size: 15MB
      max-request-size: 150MB

  security:
    user:
      name: root
      password: 1111

  profiles:
    active: dev

  jpa:
    hibernate:
      #      ddl-auto: none
      ddl-auto: none # entity 를 서버 기동때마다 새롭게 만든다.
    show-sql: true  # JPA 만든 쿼리문 로그에 출력해줘
    properties:
      hibernate:
        column_ordering_strategy: legacy
        format_sql: true  # 로그 찍을 때 보기 편하게 포맷팅해서 출력해줘

mybatis:
  mapper-locations: mappers/**/*.xml

springdoc:
  api-docs:
    version: openapi_3_1
  swagger-ui:
    path: /swagger
    operations-sorter: method
    default-model-expand-depth: 10
    default-models-expand-depth: 10
    display-request-duration: true
  cache:
    disabled: true

file:
  directory: ${DEFAULT.FILE_DIRECTORY}

# custom 속성 지정
app:
  jwt:
    secret: ${JWT_SECRET}
    header-schema-name: authorization
    token-type: Bearer

    #AT - 만료시간(ms) - 30분
    access-token-expiry: 1_800_000

    #RT - 만료시간(ms) - 15일
    refresh-token-expiry: 1_296_000_000

management:
  endpoints:
    web:
      exposure:
        include: "*"
  info:
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true
  server:
    port: 8080

coolsms:
  api:
    key: ${COOLSMS.API_KEY}
    secret: ${COOLSMS.API_SECRET}

---

spring:
  datasource:
    url: ${PROD.DB_URL}
    username: ${PROD.DB_USERNAME}
    password: ${PROD.DB_PASSWORD}
  config:
    activate:
      on-profile: prod

file:
  directory: ${PROD.FILE_DIRECTORY}